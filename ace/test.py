import util, model
import torch
import numpy as np
import matplotlib.pyplot as plt

cnn = model.CNN()
cnn.load_state_dict(torch.load('/home/iantitor/ACE-AI-MVP/models/ace.ckpt', map_location=torch.device('cpu')))
cnn.eval()

stream = np.array([51.27, 49.63, 47.71, 46.85, 48.39, 50.37, 50.41, 48.41, 46.58,
       46.93, 48.88, 50.34, 49.17, 47.22, 46.41, 48.05, 50.12, 50.46,
       48.46, 46.61, 46.66, 48.63, 50.22, 49.22, 47.1 , 45.75, 47.  ,
       49.12, 49.9 , 48.37, 46.39, 46.17, 47.78, 49.15, 48.02, 45.05,
       42.97, 44.05, 47.49, 52.44, 57.91, 65.23, 76.92, 99.93, 99.93,
       99.93, 99.93, 99.93, 99.93, 99.93, 99.93, 99.93, 73.5 , 55.83,
       46.32, 42.73, 41.04, 39.17, 37.75, 38.36, 40.24, 41.17, 39.7 ,
       37.09, 35.8 , 37.07, 39.07, 39.41, 37.38, 35.53, 35.7 , 37.87,
       39.41, 38.68, 36.46, 35.14, 36.31, 38.53, 39.29, 37.85, 35.92,
       35.92, 38.09, 40.  , 39.56, 37.7 , 35.99, 37.12, 39.48, 40.61,
       39.21, 37.02, 36.58, 38.43, 40.48, 40.39, 38.65, 37.09, 37.95,
       40.24, 41.48, 40.17, 38.14, 37.65, 39.43, 41.65, 41.78, 39.97,
       38.16, 38.65, 40.56, 41.83, 40.97, 39.02, 38.34, 40.07, 42.19,
       42.58, 41.  , 39.46, 40.04, 42.41, 44.39, 44.  , 42.31, 41.51,
       43.09, 45.56, 46.53, 45.44, 43.95, 44.27, 46.61, 48.88, 48.78,
       47.19, 46.22, 47.68, 50.15, 51.15, 49.46, 47.27, 46.73, 48.44,
       50.41, 49.8 , 47.54, 45.68, 46.14, 48.05, 49.02, 47.41, 45.29,
       44.29, 45.75, 47.49, 47.41, 45.56, 44.  , 44.56, 46.71, 48.02,
       47.14, 44.95, 44.05, 45.24, 47.24, 47.63, 45.9 , 44.19, 44.58,
       46.68, 48.41, 47.66, 45.68, 44.14, 44.95, 46.34, 46.32, 43.97,
       41.58, 40.82, 42.44, 43.8 , 42.83, 40.31, 38.7 , 39.48, 41.36,
       41.95, 40.19, 37.87, 37.14, 38.9 , 40.56, 39.9 , 37.77, 36.09,
       36.77, 38.78, 40.04, 38.65, 36.33, 35.6 , 37.16, 39.19, 39.26,
       37.31, 35.53, 36.04, 38.12, 39.43, 38.36, 35.97, 35.09, 36.58,
       38.8 , 39.17, 37.14, 35.26, 35.41, 37.43, 39.09, 38.24, 36.14,
       34.99, 36.21, 38.43, 39.07, 37.31, 35.38, 35.29, 37.24, 39.07,
       38.58, 36.36, 35.11, 36.36, 38.65, 39.56, 38.09, 36.04, 35.82,
       37.82, 39.65, 39.39, 37.21, 35.77, 36.55, 38.78, 39.82, 38.48,
       36.31, 35.7 , 37.31, 39.39, 39.41, 37.34, 35.63, 36.19, 38.43,
       39.9 , 39.02, 36.82, 36.04, 37.87, 40.07, 40.53, 38.97, 37.12,
       37.75, 39.85, 41.41, 40.58, 38.65, 37.77, 39.31, 41.51, 42.17,
       40.75, 39.07, 39.36, 41.51, 43.36, 42.92, 40.95, 39.82, 41.14,
       43.53, 44.75, 43.56, 41.8 , 41.61, 43.39, 45.31, 44.95, 43.29,
       42.02, 42.92, 45.12, 46.46, 45.17, 43.41, 43.09, 44.97, 47.02,
       47.17, 45.29, 43.68, 44.27, 46.49, 47.9 , 47.  , 45.17, 44.27,
       45.73, 47.73, 48.12, 46.34, 44.39, 44.83, 46.88, 48.44, 47.58,
       45.63, 44.66, 46.19, 48.49, 49.17, 47.78, 45.9 , 45.68, 46.97,
       47.8 , 46.8 , 45.29, 46.34, 52.73, 63.32, 75.92, 92.19, 99.93,
       99.93, 99.93, 99.93, 99.93, 99.93, 99.93, 99.93, 99.59, 73.87,
       56.69, 45.36, 40.73, 41.83, 44.39, 44.88, 43.05, 41.14, 41.34,
       43.17, 44.14, 42.9 , 40.68, 39.7 , 41.41, 43.41, 43.85, 42.22,
       40.58, 41.  , 43.29, 44.88, 43.9 , 41.85, 40.78, 42.19, 44.44,
       45.07, 43.66, 41.9 , 41.92, 43.97, 45.68, 45.22, 43.34, 42.24,
       43.56, 45.68, 46.58, 45.12, 43.31, 43.22, 45.  , 46.95, 46.73,
       44.9 , 43.51, 44.39, 46.61, 47.68, 46.36, 44.41, 43.88, 45.53,
       47.41, 47.27, 45.44, 43.75, 44.14, 45.71, 46.46, 44.68, 42.17,
       41.04, 42.31, 44.19, 44.56, 42.56, 40.87, 41.17, 43.39, 45.22,
       44.66, 43.05, 42.44, 44.39, 47.22, 48.41, 47.32, 46.1 , 46.73,
       49.22, 51.54, 51.42, 49.56, 48.37, 49.66, 51.81, 52.66, 51.1 ,
       48.8 , 48.44, 50.34, 51.95, 51.42, 49.1 , 47.56, 48.12, 50.37,
       51.32, 49.73, 47.71, 47.12, 48.83, 51.07, 51.1 , 49.15, 47.58,
       48.27, 50.44, 51.63, 50.37, 48.1 , 47.14, 48.49, 50.44, 50.59,
       48.49, 46.58, 46.85, 48.8 , 50.39, 49.27, 47.22, 46.14, 47.51,
       49.61, 50.32, 48.41, 46.51, 46.46, 48.39, 50.1 , 49.37, 47.32,
       46.05, 47.17, 49.19, 50.2 , 48.58, 46.85, 46.58, 48.44, 50.37,
       49.93, 47.93, 46.58, 47.71, 49.95, 51.29, 49.95, 47.97, 47.41,
       49.27, 51.37, 51.49, 49.59, 48.24, 49.15, 51.54, 52.73, 51.42,
       48.98, 48.02, 49.56, 51.59, 51.85, 49.95, 48.39, 48.88, 51.15,
       52.56, 51.61, 49.59, 48.8 , 50.46, 52.59, 52.98, 51.37, 49.59,
       49.76, 51.98, 53.68, 53.12, 51.15, 49.8 , 51.12, 53.29, 54.15,
       52.68, 50.76, 50.54, 52.49, 54.32, 54.2 , 52.32, 51.15, 52.  ,
       54.27, 55.49, 54.29, 52.44, 51.78, 53.59, 55.59, 55.59, 53.88,
       52.44, 53.37, 55.37, 56.61, 55.69, 53.66, 53.07, 54.71, 56.69,
       57.15, 55.42, 53.88, 54.29, 56.37, 57.86, 56.93, 54.93, 54.05,
       55.56, 57.76, 58.3 , 56.64, 54.78, 54.98, 57.05, 58.66, 58.17,
       56.17, 54.88, 56.05, 58.03, 58.64, 56.86, 54.93, 54.78, 56.83,
       59.  , 58.96, 57.05, 55.59, 56.27, 58.15, 58.96, 57.44, 55.51,
       55.05, 56.76, 58.88, 58.88, 57.03, 55.44, 55.93, 58.05, 59.25,
       58.13, 55.86, 55.17, 56.78, 58.88, 59.03, 57.13, 55.37, 55.78,
       57.71, 59.  , 58.05, 55.91, 54.83, 56.17, 58.17, 58.49, 56.61,
       54.64, 54.39, 56.15, 57.37, 56.3 , 54.  , 52.44, 52.86, 54.05,
       53.86, 51.95, 51.37, 54.69, 63.47, 75.21, 91.12, 99.93, 99.93,
       99.93, 99.93, 99.93, 99.93, 99.93, 99.93, 99.93, 99.93, 80.21,
       61.03, 48.73, 44.07, 44.49, 45.85, 45.27, 43.56, 42.61, 43.85,
       45.51, 45.29, 43.27, 41.43, 41.78, 43.9 , 45.29, 44.24, 42.29,
       41.41, 42.92, 45.05, 45.58, 43.73, 42.14, 42.53, 44.58, 46.1 ,
       45.41, 43.46, 42.46, 43.85, 46.07, 46.85, 45.44, 43.56, 43.51,
       45.56, 47.27, 46.8 , 44.88, 43.51, 44.53, 46.8 , 48.  , 46.53,
       44.75, 44.24, 45.9 , 47.68, 47.63, 45.73, 44.24, 45.02, 47.14,
       48.41, 47.22, 45.12, 44.29, 45.92, 47.93, 48.02, 46.34, 44.92,
       45.75, 48.1 , 50.12, 49.46, 47.88, 47.22, 48.66, 50.78, 51.2 ,
       49.56, 48.02, 48.41, 50.88, 52.71, 52.61, 51.2 , 50.85, 52.78,
       55.61, 56.93, 55.95, 54.49, 54.69, 56.78, 58.64, 58.17, 56.15,
       54.64, 55.39, 57.25, 58.08, 56.56, 54.39, 53.76, 55.32, 56.93,
       56.44, 54.29, 52.66, 53.17, 55.03, 56.05, 54.78, 52.71, 51.93,
       53.37, 55.17, 55.12, 53.17, 51.15, 51.27, 53.12, 54.59, 53.51,
       51.54, 50.44, 51.68, 53.56, 53.76, 51.93, 50.1 , 50.12, 51.93,
       53.37, 52.39, 50.46, 49.19, 50.37, 52.32, 53.03, 51.37, 49.24,
       48.98, 50.76, 52.39, 51.85, 49.71, 48.41, 49.54, 51.66, 52.59,
       51.15, 49.17, 48.73, 50.49, 52.29, 51.98, 50.12, 48.44, 49.1 ,
       51.17, 52.1 , 50.83, 48.63, 47.9 , 49.37, 51.39, 51.42, 49.44,
       47.68, 48.02, 49.85, 51.2 , 49.83, 47.78, 46.78, 48.02, 49.95,
       50.41, 48.46, 46.53, 46.58, 48.41, 49.93, 49.07, 47.  , 45.8 ,
       47.1 , 49.15, 49.68, 47.95, 45.95, 45.68, 47.27, 48.93, 48.37,
       46.29, 44.9 , 45.68, 47.66, 48.56, 47.19, 45.22, 44.68, 46.44,
       48.02, 47.56, 45.29, 43.34, 43.41, 44.88, 45.56, 43.85, 41.56,
       40.63, 41.97, 43.68, 43.46, 41.29, 39.43, 39.7 , 41.53, 42.92,
       41.7 , 39.46, 38.38, 39.48, 41.36, 41.56, 39.85, 37.95, 38.14,
       39.97, 41.39, 40.48, 38.29, 36.68, 37.73, 39.43, 39.8 , 37.9 ,
       35.75, 35.55, 37.46, 39.21, 38.65, 36.48, 35.07, 35.94, 37.95,
       38.8 , 37.12, 35.19, 34.75, 36.43, 38.31, 37.9 , 35.7 , 33.99,
       34.7 , 36.63, 38.02, 36.92, 35.16, 34.75, 36.48, 38.6 , 38.53,
       36.31, 34.53, 34.97, 37.09, 38.65, 37.38, 35.55, 34.72, 36.07,
       38.29, 38.65, 36.82, 35.14, 35.53, 37.85, 39.43, 38.68, 36.43,
       35.36, 36.6 , 38.65, 39.29, 37.7 , 35.77, 35.75, 37.85, 39.56,
       39.04, 37.07, 35.8 , 36.77, 39.04, 40.  , 38.6 , 36.55, 36.19,
       38.19, 39.73, 39.07, 36.16, 33.85, 34.75, 38.65, 43.73, 49.59,
       56.69, 66.59, 81.5 , 99.93, 99.93, 99.93, 99.93, 99.93, 99.93,
       99.93, 77.43, 55.27, 40.65, 34.99, 34.8 , 35.21, 33.82, 32.02,
       31.72, 33.19, 34.19, 33.06, 30.8 , 29.45, 30.7 , 32.7 , 33.38,
       31.8 , 29.97, 29.94, 31.89, 33.63, 33.19, 31.36, 30.06, 31.26,
       33.33])

categories = ['Non-ecotopiic beats', 'Supraventricular ectopic beats', 'Ventricular ectopic beats', 'Fusion Beats', 'Unknown Beats']
for i in range(700):
  inputs = torch.tensor(stream[i: i + 320])
  inputs = torch.nn.functional.avg_pool1d(inputs.unsqueeze(0), kernel_size=12, stride=1)[0]
  inputs -= inputs.min()
  in_max = inputs.max()
  inputs /= in_max if in_max else 1.
  image = torch.tensor(util.graph((256, 256), inputs)).float()
  with torch.no_grad():
    logits = cnn(image.unsqueeze(0).unsqueeze(0))
  probabilities = torch.nn.functional.softmax(logits)[0].numpy()
  message = ''
  for category, probability in zip(categories, probabilities):
      message += f'\n{category}: {int(probability * 10000)/100}%'
  message += f'\n\n\nChoice: {categories[np.argmax(probabilities)]}'
  print(message)
  util.show_img(image)
